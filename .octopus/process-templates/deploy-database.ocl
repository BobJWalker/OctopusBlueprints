name = "Deploy Process - Deploy Database"
description = "Process template that will deploy a database using DBUp"

icon {
    color = "#173B56"
    id = "database"
}

parameter "Template.Database.Package" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "**Required:** The package containing all the DBUp executable and scripts to run."
    label = "Database Package"
}

parameter "Template.DbUp.Executable" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The executable of your self-contained dotnet console application to run.  Example: `Trident.Database.DbUp`"
    label = "DBUp Executable"
}

parameter "Template.Database.ConnectionString" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The connection string of the database to modify."
    label = "Database Connection String"
}

parameter "Template.Database.ChangeReportDirectory" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The directory where the delta report will be stored after creation."
    label = "Delta Report Directory"

    value "../../#{Octopus.Project.Name}/#{Octopus.Release.Number}/#{Octopus.Environment.Name}" {}
}

parameter "Template.WorkerPool" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = "**Required:** The worker pool on which the deployment steps will run.  "
    label = "Worker Pool"
}

parameter "Template.Approval.Environments" {
    display_settings = {
        Octopus.ControlType = "Environments"
    }
    help_text = "**Required:** The environments where the approval should take place.  "
    label = "Approval Environment"
}

step "build-delta-report" {
    name = "Build Delta Report and check for auto approval"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                Builds a report containing all the scripts that haven't run on the target database.  Check the delta report for dangerous commands that require approval.
                EOT
        properties = {
            Octopus.Action.ExecutionTimeout.Minutes = "15"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $connectionString = $OctopusParameters["Template.Database.ConnectionString"]
                $changeReportDirectory = $OctopusParameters["Template.Database.ChangeReportDirectory"]
                $projectExe = $OctopusParameters["Template.DbUp.Executable"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.Database.Package].ExtractedPath"]
                $stepName = $OctopusParameters["Octopus.Action.StepName"]
                
                Get-ChildItem -Path "$extractedPath" -File
                                
                Write-Host "Setting the current location to $extractedPath"
                Set-Location $extractedPath
                                
                Write-Host "Doing a what-if migration, generating a change report at $changeReportDirectory"
                                
                if ((test-path $changeReportDirectory) -eq $false){
                  Write-Host "The directory $changeReportDirectory does not exist, creating it now"
                  New-Item $changeReportDirectory -ItemType "directory"
                }
                
                chmod +x "./$projectExe"
                
                & "./$projectExe" --ConnectionString="$connectionString" --PreviewReportPath="$changeReportDirectory"
                                
                $generatedReport = "$changeReportDirectory/UpgradeReport.html"
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
                
                $CommandsRequireApproval = "Create Table,Alter Table,Drop Table,Create Function,Create View,Drop Function,sp_addrolemember,sp_droprolemember,alter role,Merge,Create Schema"
                
                $ApprovalRequired = $false
                
                $fileContent = Get-Content -path $generatedReport
                
                $commandListToCheck = $CommandsRequireApproval -split ","
                Write-Host "Looping through all commands requiring approval for $generatedReport"
                foreach ($command in $commandListToCheck)
                {
                 	Write-Host "Checking $generatedReport for command $command"
                   	$foundCommand = $fileContent -match "$command"
                    
                   	if ($foundCommand)
                    {
                      	Write-Highlight "⚠️ $generatedReport has the command '$command'"
                        $ApprovalRequired = $true        
                    }
                }
                
                if ($approvalRequired -eq $false)
                {
                	Write-Highlight "✅ No script has a command requiring a DBA to approve."
                }
                else
                {
                	Write-Highlight "⚠️ One or more commands found requiring a DBA to approve."
                }
                
                $scriptContainsChanges = $false
                $commandsIndicatingaChange = "Insert Into,Delete From"
                if ($approvalRequired -eq $true) {
                  $scriptContainsChanges = $true
                }
                else {
                  $changeListToCheck = $commandsIndicatingaChange -split ","
                  Write-Host "Looping through all commands indicating a change in $generatedReport"
                  foreach ($command in $changeListToCheck)
                  {
                 	Write-Host "Checking $generatedReport for command $command"
                   	$foundCommand = $fileContent -match "$command"
                    
                   	if ($foundCommand)
                    {
                      	Write-Host "⚠️ $generatedReport has the command '$command'"
                        $scriptContainsChanges = $true        
                    }
                  }
                }
                
                if ($scriptContainsChanges -eq $false)
                {
                	Write-Highlight "✅ No meaningful changes detected - skipping the deploy database step."
                }
                
                
                Write-Host "Adding ApprovalRequired with the value $ApprovalRequired as an output variable"
                Set-OctopusVariable -name "ApprovalRequired" -value $ApprovalRequired
                Write-Host "Variable run conditions: ##{unless Octopus.Deployment.Error}#{Octopus.ProcessTemplate.Action[$stepName].Output.ApprovalRequired}##{/unless}"
                
                Write-Host "Adding DeltaScriptContainsChanges with the value $scriptContainsChanges as an output variable"
                Set-OctopusVariable -name "DeltaScriptContainsChanges" -value $scriptContainsChanges
                Write-Host "Variable run conditions: ##{unless Octopus.Deployment.Error}#{Octopus.ProcessTemplate.Action[$stepName].Output.DeltaScriptContainsChanges}##{/unless}"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.WorkerPool}"

        packages "Template.Database.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.Database.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "notify-dbas" {
    condition = "Variable"
    name = "Notify DBAs"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.ProcessTemplate.Action[Build Delta Report and check for auto approval].Output.ApprovalRequired}#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        environments_variable = "#{Template.Approval.Environments}"
        is_required = true
        notes = <<-EOT
                **Runs when a dangerous sql command is detected**
                
                Sends out an email notifying DBAs there is a pending change for them to review.
                EOT
        properties = {
            Octopus.Action.Email.Body = "You can view the the deployment here: #{Octopus.Web.ServerUri}/app#/#{Octopus.Space.Id}/tasks/#{Octopus.Task.Id}."
            Octopus.Action.Email.Subject = "#{Octopus.Project.Name} #{Octopus.Release.Number} to #{Octopus.Environment.Name} has paused and is awaiting review."
            Octopus.Action.Email.ToTeamIds = "global/central-dbas"
        }
    }
}

step "dbas-approve-delta-script" {
    condition = "Variable"
    name = "DBAs Approve Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.ProcessTemplate.Action[Build Delta Report and check for auto approval].Output.ApprovalRequired}#{/unless}"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Manual"
        environments_variable = "#{Template.Approval.Environments}"
        notes = <<-EOT
                **Runs when a dangerous sql command is detected**
                
                Pauses the deployment to allow DBAs to review the delta script for any potential destructive actions on the database.
                EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please review and verify the migration database report matches your expectations for a deployment."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/central-dbas"
        }
    }
}

step "deploy-database-changes" {
    condition = "Variable"
    name = "Deploy Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.ProcessTemplate.Action[Build Delta Report and check for auto approval].Output.DeltaScriptContainsChanges}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs when there are meaningful changes detected**
                
                Deploys the database changes by running the scripts found in the package.
                EOT
        properties = {
            Octopus.Action.ExecutionTimeout.Minutes = "30"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $connectionString = $OctopusParameters["Template.Database.ConnectionString"]
                $projectExe = $OctopusParameters["Template.DbUp.Executable"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.Database.Package].ExtractedPath"]
                                
                Write-Host "Setting the current location to $extractedPath"
                Set-Location $extractedPath
                
                chmod +x "./$projectExe"
                
                & "./$projectExe" --ConnectionString="$connectionString"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.WorkerPool}"

        packages "Template.Database.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.Database.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}