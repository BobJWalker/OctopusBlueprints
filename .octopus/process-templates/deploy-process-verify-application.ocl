name = "Deploy Process - Verify Build Artifacts"
description = "A process template that attaches an SBOM to a deployment and compares the SHA256 hashes of containers and a package."

icon {
    color = "#CA1E1E"
    id = "box-fragile"
}

parameter "Template.SBOM.Package" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package which contains the SBOM and a YAML file containing the SHAs of each container or package you want to verify."
    label = "SBOM Package"
}

parameter "Template.Sha.FileName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the JSON file in the SBOM package containing all the hashes to verify."
    label = "File containing hashes"
}

parameter "Template.Docker.Containers" {
    display_settings = {
        Octopus.ControlType = "MultiLineText"
    }
    help_text = "The list of docker containers `[owner]/[repo]:[version]` you want to verify haven't changed since the build server.  New line per container to verify."
    label = "Docker Containers"
}

parameter "Template.Verify.Package" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package you want to verify it's current SHA with the SHA from when it was built.  If you want to skip this verification, then uncheck the checkbox for the `Enable Package Verification Step` parameter."
    label = "Package to verify"
}

parameter "Template.Verify.Package.Enable" {
    display_settings = {
        Octopus.ControlType = "Checkbox"
    }
    help_text = "Check this check box if you want this template to verify the specified package."
    label = "Enable Package Verification Step"

    value "True" {}
}

step "attach-sbom-to-release" {
    name = "Attach SBOM to Release"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                Will extract the SBOM package and find the JSON SBOM file and attach it to the deployment as an artifact.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Package].ExtractedPath"]
                $releaseNumber = $OctopusParameters["Octopus.Release.Number"]
                
                # Get all .json files recursively
                $jsonFiles = Get-ChildItem -Path $extractedPath -Filter "sbom-*.json" -Recurse
                
                # Iterate through each .json file
                foreach ($file in $jsonFiles) 
                {
                    Write-Host "Processing file: $($file.FullName)"
                    
                    New-OctopusArtifact -Path "$($file.FullName)" -Name "$releaseNumber.SBOM.JSON"
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages "Template.SBOM.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-docker-containers" {
    name = "Verify Docker Containers"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                Will loop through the list of provided Docker containers and attempt to match it to one of the hashes in the manifest file found in the SBOM package.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Package].ExtractedPath"]
                $fileName = $OctopusParameters["Template.Sha.FileName"]
                $objectToGetHash = $OctopusParameters["Template.Docker.Containers"]
                
                $convertedFile = Get-Content -path "$($extractedPath)/$($fileName)" -raw | ConvertFrom-Json
                
                $objectArray = $objectToGetHash.Split("`n")
                foreach($dockerImage in $objectArray)
                {
                  $imageToPull = $dockerImage.Trim().Split(':')
                  Write-Host "Invoking https://registry.hub.docker.com/v2/repositories/$($imageToPull[0])/tags?name=$($imageToPull[1])"
                  $workerToolsTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/$($imageToPull[0])/tags?name=$($imageToPull[1])"
                  
                  $matchingTag = $workerToolsTags.results | Where-Object { $_.name -eq $imageToPull[1] }
                  
                  $hashOfObject = $matchingTag.digest
                  Write-Host "The docker hash is $hashOfObject"
                
                  $foundSha = $false
                  # Loop through all the keys
                  foreach ($key in $convertedFile.PSObject.Properties.Name) 
                  {
                     $item = $convertedFile.$key    
                     Write-Host "The hash to compare is $item"
                
                     if ($item -eq $hashOfObject)
                     {
                       Write-Host "The hash $item matches the hash $hashOfObject of the object $imageToPull"
                       $foundSha = $true
                     }
                     else 
                     {
                        Write-Host "The hash $item does not match the hash of the object $imageToPull"
                     }
                  }
                
                  if ($foundSha -eq $true)
                  {
                    Write-Host "The hash of $imageToPull was found in the file $fileContainingSha"
                  }
                  else 
                  {
                    Write-Error "The hash of $imageToPull was not found, stopping the deployment."
                  }
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages "Template.SBOM.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-package" {
    condition = "Variable"
    name = "Verify Package"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Template.Verify.Package.Enable}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs based on configuration**
                
                Will attempt to match the provided package to one of the hashes in the manifest file found in the SBOM package.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Package].ExtractedPath"]
                $fileName = $OctopusParameters["Template.Sha.FileName"]
                $packageToVerify = $OctopusParameters["Octopus.Action.Package[Template.Verify.Package].PackageFilePath"]
                
                $convertedFile = Get-Content -path "$($extractedPath)/$($fileName)" -raw | ConvertFrom-Json
                
                Write-Host "Getting the hash from the file $packageToVerify"
                $rawHash = Get-FileHash -Path $packageToVerify -Algorithm SHA256
                $hashOfObject = $rawHash.Hash
                
                Write-Host "The hash of the package to verify is $hashOfObject"
                $foundSha = $false
                foreach ($key in $convertedFile.PSObject.Properties.Name) 
                {
                  $item = $convertedFile.$key
                  Write-Host "The hash to compare is $item"
                
                  if ($item -eq $hashOfObject)
                  {
                    Write-Host "The hash $item matches the hash $hashOfObject of the object $imageToPull"
                    $foundSha = $true
                  }
                  else 
                  {
                    Write-Host "The hash $item does not match the hash of the object $imageToPull"
                  }
                }
                
                if ($foundSha -eq $true)
                {
                  Write-Host "The hash of $imageToPull was found in the file $fileContainingSha"
                }
                else 
                {
                  Write-Error "The hash of $imageToPull was not found, stopping the deployment"
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages "Template.SBOM.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }

        packages "Template.Verify.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.Verify.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}