name = "Deploy Process - Attach SBOM and Verify Build Artifacts"
description = "A process template that attaches the SBOM to the deployment and compares the SHA256 hashes of the build artifacts."

icon {
    color = "#173B56"
    id = "box-fragile"
}

parameter "Template.SBOM.Artifact" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package containing the SBOM artifact that was generated by the build server.  "
    label = "SBOM Package"
}

parameter "Template.Artifacts" {
    display_settings = {
        Octopus.ControlType = "MultiLineText"
    }
    help_text = <<-EOT
            The list of Docker containers or packages you want to verify haven't changed since the build server.  
            
            New line per item to verify.
            
            - For Docker containers use the format: `[owner]/[repo]:[version]`
            - For packages use the format: `[packagename]:[version]`
            EOT
    label = "Artifacts to Verify"
}

parameter "Template.Git.AuthToken" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The token of a user with permission to download build artifacts from GitHub."
    label = "GitHub Auth Token"
}

parameter "Template.Verify.WorkerPool" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = "**Required:** The worker pool on which these steps will execute."
    label = "Worker Pool"
}

parameter "Template.Verify.ExecutionContainerFeed" {
    display_settings = {
        Octopus.ControlType = "Feed"
    }
    help_text = "The `DockerHub` to be used in which to pull the execution containers from."
    label = "Verify Container Feed"
}

step "attach-sbom-to-release" {
    name = "Attach SBOM to Release"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will pull the SBOM from the GitHub Release and attach it as a deployment artifact.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].ExtractedPath"]
                
                Write-Host "The SBOM extracted file path is $extractedPath"
                      
                $sbomFiles = Get-ChildItem -Path $extractedPath -Filter "*.json" -Recurse
                
                foreach ($sbom in $sbomFiles)
                {
                  Write-Host "Attaching $($sbom.FullName) as an artifacts"
                  New-OctopusArtifact -Path $sbom.FullName -Name "$OctopusEnvironmentName.SBOM.JSON"
                
                  break
                } 
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }

        packages "Template.SBOM.Artifact" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Artifact"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-docker-containers" {
    name = "Run Attestation Verification on Build Artifacts"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will loop through the list of provided Docker containers and packages to verify their attestations using GitHub's CLI tooling.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $objectToGetHash = $OctopusParameters["Template.Artifacts"]
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                $packageVersion = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].PackageVersion"]
                $sbompackageName = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].PackageId"]
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                
                $vcsRoot = $null
                
                Write-Host "Getting the repo name from build information"
                foreach ($package in $buildInfoObject)
                {
                  Write-Host "Comparing $($package.Version) with $($packageVersion)"
                  if ($packageVersion -eq $package.Version)
                  {
                    Write-Host "Versions match, getting the build URL"    
                    $vcsRoot = $package.VcsRoot
                    Write-Host "The vcsRoot is $vcsRoot"    
                  }
                }
                
                if ($null -eq $vcsRoot)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $packageName.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $vcsRoot -Replace "https://github.com/", ""
                
                $env:GITHUB_TOKEN = $gitHubToken
                
                $appendedObjectToGetHash = "$($objectToGetHash)`n$($sbompackageName):$($packageVersion)"
                $objectArray = $appendedObjectToGetHash.Split("`n")
                foreach($packageItem in $objectArray)
                {    
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageName = $artifactToCompare[0].Replace("/", "")
                  
                  if ($packageItem.Contains("/"))
                  {
                      $imageToAttest = "oci://$packageItem"
                
                      Write-Host "Attesting to $imageToAttest in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$imageToAttest" --repo $githubLessUrl --format json 
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                  }
                  else
                  {    
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                
                    $artifactVerified = $false
                    foreach ($file in $zipFiles) 
                    {
                      if (test-path "$packageName.$OctopusEnvironmentName.attestation.json")
                      {
                        Continue
                      }
                      
                      Write-Host "Attesting to $($file.FullName) in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$($file.FullName)" --repo $githubLessUrl --format json
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                      $artifactVerified = $true
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                    }
                
                    if ($artifactVerified -eq $false)
                    {
                      Write-Error "Unable to find a matching zip file for $packageItem to verify the attestation."
                    }
                  }
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }

        packages "Template.SBOM.Artifact" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.SBOM.Artifact"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}