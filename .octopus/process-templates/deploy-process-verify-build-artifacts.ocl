name = "Deploy Process - Attach SBOM and Verify Build Artifacts"
description = "A process template that attaches the SBOM to the deployment and compares the SHA256 hashes of the build artifacts."

icon {
    color = "#173B56"
    id = "box-fragile"
}

parameter "Template.SBOM.Artifact" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package containing the SBOM artifact that was generated by the build server.  "
    label = "SBOM Package"
}

parameter "Template.Git.AuthToken" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The token of a user with permission to download build artifacts from GitHub."
    label = "GitHub Auth Token"
}

parameter "Template.Verify.WorkerPool" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = "**Required:** The worker pool on which these steps will execute."
    label = "Worker Pool"
}

parameter "Template.Verify.ExecutionContainerFeed" {
    display_settings = {
        Octopus.ControlType = "Feed"
    }
    help_text = "The `DockerHub` to be used in which to pull the execution containers from."
    label = "Verify Container Feed"
}

step "get-packages-and-build-information" {
    name = "Get Packages and Build Information"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Pulls the package and build information for the deployment so it can be used later for vulnerability scanning and attestation verification
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                
                $objectArray = @()
                foreach ($key in $OctopusParameters.Keys)
                {
                  if ($key -like "*.PackageId")
                  {
                    Write-Host "Found a package Id parameter: $key - checking to see if it already is in the packages to verify"
                    
                    $packageId = $OctopusParameters[$key]
                    Write-Host "The package ID to check for is $packageId"
                
                    $packageVersionKey = $key -replace ".PackageId", ".PackageVersion"
                    Write-Host "The package version key is $packageVersionKey"
                    $packageVersion = $OctopusParameters[$packageVersionKey]
                    Write-Host "The package version is $packageVersion"
                
                    $packageVersionToVerify = "$($packageId):$($packageVersion)"
                
                    if ($objectArray -contains "$packageVersionToVerify")
                    {
                      Write-Host "$packageVersionToVerify already exists in the array"
                    }
                    else
                    {
                      Write-Host "$packageVersionToVerify does not exist - adding it"
                      $objectArray += $packageVersionToVerify
                    }    
                  }  
                }
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                $vcsRoot = $null
                $prMergeHash = $null
                
                Write-Host "Getting the repo name from build information"
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageVersion = $artifactToCompare[1]
                  
                  Write-Host "The version to look for is: $packageVersion"
                  
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($packageVersion)"
                    if ($packageVersion -ne $package.Version)
                    {
                      Write-Host "The versions do not match, moving onto the next item."
                      continue
                    }
                    
                    Write-Host "Versions match, getting the build URL"    
                    $vcsRoot = $package.VcsRoot
                    Write-Host "The vcsRoot is $vcsRoot"        
                
                    $lastCommit = $package.Commits | Select-Object -Last 1
                    $prMergeHash = $lastCommit.Id
                  }
                }
                
                if ($null -eq $vcsRoot)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information.  Check that the build information has been supplied and try again."
                }
                
                $objectArrayAsString = ConvertTo-JSON $objectArray
                Write-Host "Adding the output variable PackagesToVerify with the value $objectArrayAsString"
                Set-OctopusVariable -name "PackagesToVerify" -value $objectArrayAsString
                
                $githubLessUrl = $vcsRoot -Replace "https://github.com/", ""
                Write-Host "Adding the output variable GitHubRepoName with the value $githubLessUrl"
                Set-OctopusVariable -name "GitHubRepoName" -value $githubLessUrl
                
                if ($null -ne $prMergeHash)
                {
                  Write-Host "Adding the output variable LastGitCommitHash with the value $prMergeHash"
                  Set-OctopusVariable -name "LastGitCommitHash" -value $prMergeHash
                }
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:2.79.0"
        }
    }
}

step "attach-sbom-to-release" {
    name = "Attach SBOM and Check for Open Vulnerabilities"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will pull the SBOM from the package and attach it as a deployment artifact.  After, it will scan the SBOM for any known fixed third-party vulnerabilities.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].ExtractedPath"]
                
                Write-Host "The SBOM extracted file path is this value $extractedPath"
                      
                $sbomFiles = Get-ChildItem -Path $extractedPath -Filter "*.json" -Recurse
                
                foreach ($sbom in $sbomFiles)
                {
                  Write-Host "Attaching $($sbom.FullName) as an artifacts"
                  New-OctopusArtifact -Path $sbom.FullName -Name "$OctopusEnvironmentName.SBOM.JSON"  
                
                  Write-Host "Running trivy to scan the SBOM for any new vulnerabilities since the build was run"
                  trivy sbom $sbom.FullName --severity "MEDIUM,HIGH,CRITICAL" --ignore-unfixed --quiet
                
                  if ($LASTEXITCODE -eq 0)
                  {
                    Write-Highlight "✅ Successfully scanned the SBOM and no new vulnerabilities were found in the referenced third-party libraries."
                  }
                  else
                  {
                     Write-Error "⚠️ Vulnerabilities found that must be fixed.  Please update the package references and rebuild the application."
                  }
                } 
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:2.79.0"
        }

        packages "Template.SBOM.Artifact" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Artifact"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-docker-containers" {
    name = "Run Attestation Verification on Build Artifacts"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                This step loops through the list of Docker containers and packages to verify their attestations using GitHub's CLI tooling. If a container is found, it scans it for any known fixed third-party vulnerabilities.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $objectArrayRaw = $OctopusParameters["Octopus.ProcessTemplate.Action[Get Packages and Build Information].Output.PackagesToVerify"]
                $objectArray = ConvertFrom-Json $ObjectArrayRaw
                
                $githubLessUrl = $OctopusParameters["Octopus.ProcessTemplate.Action[Get Packages and Build Information].Output.GitHubRepoName"]
                
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                $env:GITHUB_TOKEN = $gitHubToken
                
                foreach($packageItem in $objectArray)
                {    
                  Write-Host "Verifying $packageItem"
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageName = $artifactToCompare[0].Replace("/", "")
                  
                  if ($packageItem.Contains("/"))
                  {
                      $imageToAttest = "oci://$packageItem"
                
                      Write-Host "Attesting to $imageToAttest in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$imageToAttest" --repo $githubLessUrl --format json 
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                
                      Write-Host "Running trivy to check the container for any known vulnerabilities that might have been discovered since the build."      
                      trivy image --severity "MEDIUM,HIGH,CRITICAL" --ignore-unfixed --quiet $packageItem
                      if ($LASTEXITCODE -eq 0)
                      {
                          Write-Highlight "✅ Successfully verified $packageItem has no new fixed vulnerabilities have been found."
                      }
                      else
                      {
                         Write-Error "⚠️ Fixable vulnerabilities found in the build artifacts that must be fixed.  You can no longer deploy this release.  Please update the base container version, rebuild the application, and create a new release."
                      }
                  }
                  else
                  {    
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                
                    $artifactVerified = $false
                    foreach ($file in $zipFiles) 
                    {
                      if (test-path "$packageName.$OctopusEnvironmentName.attestation.json")
                      {
                        Continue
                      }
                      
                      Write-Host "Attesting to $($file.FullName) in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$($file.FullName)" --repo $githubLessUrl --format json
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified - this means no attestation was generated or the package has been tampered with since it was created - stopping the deployment to avoid a security incident."
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                      $artifactVerified = $true
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                    }
                
                    if ($artifactVerified -eq $false)
                    {
                      Write-Error "The attestation for $packageItem could not be verified - this means no attestation was generated or the package has been tampered with since it was created - stopping the deployment to avoid a security incident."
                    }
                  }  
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:2.79.0"
        }
    }
}

step "check-github-for-open-vulnerabilities" {
    name = "Check GitHub for Open Vulnerabilities"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                It uses the GitHub API to check for open critical or high vulnerability reports before allowing the deployment to proceed.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                function Invoke-GitHubPagedUrl
                {
                  param (
                    $Token,
                    $Repo,
                    $IsDependabot,    
                  )
                
                  $Headers = @{
                    "Authorization" = "Bearer $Token"
                    "Accept"        = "application/vnd.github+json"
                  }
                
                  # Collect all alerts
                  $AllAlerts = @()
                  $Page = 1
                  $PerPage = 100
                
                  do {
                    # Build API URL with severity filter
                    $Url = "https://api.github.com/repos/$repo"
                
                    if ($IsDependabot) {
                      $Url += "/dependabot"
                    }
                    else {
                      $Url += "/code-scanning"
                    }
                    
                    $Url += "/alerts?state=open&severity=critical&severity=high&severity=medium&per_page=$PerPage&page=$Page"     
                
                    Write-Host "Fetching page $Page of code scanning alerts for $Owner/$Repo ..."    
                
                    try {
                        Write-Host "Invoking $url to get open alerts"
                        $Response = Invoke-RestMethod -Uri $Url -Headers $Headers -Method Get
                    }
                    catch {
                        Write-Error "Error fetching alerts from page: $Page"
                        break
                    }
                
                    if ($Response) {
                        $AllAlerts += $Response
                        $Page++
                    }
                  } while ($Response.Count -eq $PerPage)  # continue if full page returned
                
                  if (-not $AllAlerts -or $AllAlerts.Count -eq 0) {
                    if ($IsDependabot)
                    {
                      Write-Highlight "✅ No open GitHub Dependabot alerts found with Critical or High severity."
                    }
                    else
                    {
                      Write-Highlight "✅ No open GitHub Code Scanning alerts found with Critical or High severity."
                    }
                    
                  }
                  else {
                    if ($IsDependabot)
                    {
                      Write-Highlight "⚠️ Found $($AllAlerts.Count) open [GitHub Dependabot alerts](https://github.com/$repo/security/dependabot) with Critical or High severity."
                    }
                    else
                    {
                      Write-Highlight "⚠️ Found $($AllAlerts.Count) open [GitHub Code Scanning alerts](https://github.com/$repo/security/code-scanning) with Critical or High severity."
                    }    
                    
                    Write-Error "Unable to proceed as open alerts in GitHub were found."    
                  }
                }
                
                $githubLessUrl = $OctopusParameters["Octopus.ProcessTemplate.Action[Get Packages and Build Information].Output.GitHubRepoName"]
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                Invoke-GitHubPagedUrl -Token $GitHubToken -Repo $githubLessUrl -IsDependabot $true
                Invoke-GitHubPagedUrl -Token $GitHubToken -Repo $githubLessUrl -IsDependabot $false 
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:2.79.0"
        }
    }
}