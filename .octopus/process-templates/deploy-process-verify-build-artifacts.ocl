name = "Deploy Process - Attach SBOM and Verify Build Artifacts"
description = "A process template that attaches the SBOM to the deployment and compares the SHA256 hashes of the build artifacts."

icon {
    color = "#CA1E1E"
    id = "box-fragile"
}

parameter "Template.Artifacts" {
    display_settings = {
        Octopus.ControlType = "MultiLineText"
    }
    help_text = <<-EOT
            The list of Docker containers or packages you want to verify haven't changed since the build server.  
            
            New line per item to verify.
            
            - For Docker containers use the format: `[owner]/[repo]:[version]`
            - For packages use the format: `[packagename]:[version]`
            EOT
    label = "Artifacts to Verify"
}

parameter "Template.Git.AuthToken" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = "The token of a user with permission to download build artifacts from GitHub."
    label = "GitHub Auth Token"
}

step "attach-sbom-to-release" {
    name = "Attach SBOM to Release"
    package_requirement = "AfterPackageAcquisition"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will pull the SBOM from the GitHub Release and attach it as a deployment artifact.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $objectToGetHash = $OctopusParameters["Template.Artifacts"]
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                
                $objectArray = $objectToGetHash.Split("`n")
                $buildUrl = $null
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  Write-Host "The version to find in build information is $($artifactToCompare[1])"
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($artifactToCompare[1])"
                    if ($artifactToCompare[1] -eq $package.Version)
                    {
                      Write-Host "Versions match, getting the build URL"
                      $buildUrl = $package.BuildUrl
                      Write-Host "The build url is $buildUrl"
                    }
                  }
                }
                
                if ($null -eq $buildUrl)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $objectToGetHash.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $buildUrl -Replace "https://github.com/", ""
                $artifactUrl = "https://api.github.com/repos/$($githubLessUrl)/artifacts"
                Write-Host "The artifact url is $artifactUrl"
                
                $actionArtifacts = Invoke-RestMethod -uri $artifactUrl -Headers @{"Authorization" = "Bearer $gitHubToken" }
                foreach ($artifact in $actionArtifacts.artifacts)
                {
                  Write-Host "Processing $($artifact.name)"
                  if ($artifact.name -ne "artifact-sbom")
                  {
                    continue
                  }
                
                  Write-Host "Downloading the SBOM from $($artifact.archive_download_url)"
                  Invoke-RestMethod -Uri $artifact.archive_download_url -OutFile "artifact-sbom.zip" -Headers @{"Authorization" = "Bearer $gitHubToken" }
                }
                
                if ((test-path "artifact-sbom.zip") -eq $true)
                {
                  Expand-Archive -path "artifact-sbom.zip" -DestinationPath "./artifact-sbom"
                  $sbomFiles = Get-ChildItem -Path "./artifact-sbom" -Filter "*.json" -Recurse
                
                  foreach ($sbom in $sbomFiles)
                  {
                    Write-Host "Attaching $($sbom.FullName) as an artifacts"
                    New-OctopusArtifact -Path $sbom.FullName -Name "$OctopusEnvironmentName.SBOM.JSON"
                
                    break
                  }  
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "verify-docker-containers" {
    name = "Verify Package SHA"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will loop through the list of provided docker containers and packages and attempt to match it to one of the hashes in the manifest file found in the SBOM package.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $objectToGetHash = $OctopusParameters["Template.Artifacts"]
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                
                $objectArray = $objectToGetHash.Split("`n")
                $buildUrl = $null
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  Write-Host "The version to find in build information is $($artifactToCompare[1])"
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($artifactToCompare[1])"
                    if ($artifactToCompare[1] -eq $package.Version)
                    {
                      Write-Host "Versions match, getting the build URL"
                      $buildUrl = $package.BuildUrl
                      Write-Host "The build url is $buildUrl"
                    }
                  }
                }
                
                if ($null -eq $buildUrl)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $objectToGetHash.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $buildUrl -Replace "https://github.com/", ""
                $artifactUrl = "https://api.github.com/repos/$($githubLessUrl)/artifacts"
                Write-Host "The artifact url is $artifactUrl"
                
                $actionArtifacts = Invoke-RestMethod -uri $artifactUrl -Headers @{"Authorization" = "Bearer $gitHubToken" }
                foreach ($artifact in $actionArtifacts.artifacts)
                {
                  Write-Host "Processing $($artifact.name)"
                  if ($artifact.name -ne "artifact-hashes")
                  {
                    continue
                  }
                
                  Write-Host "The download url is $($artifact.archive_download_url)"
                  Invoke-RestMethod -Uri $artifact.archive_download_url -OutFile "artifact-hashes.zip" -Headers @{"Authorization" = "Bearer $gitHubToken" }
                }
                
                if ((test-path "artifact-hashes.zip") -eq $false)
                {
                  Write-Error "Unable to download the artifact from github that contains the build hashes"
                }
                Expand-Archive -path "artifact-hashes.zip" -DestinationPath "./artifact-hashes"
                $artifactHashes = Get-ChildItem -Path "./artifact-hashes" -Filter "*.json" -Recurse
                
                foreach ($artifactHashFile in $artifactHashes)
                {
                  Write-Host "Attaching $($artifactHashFile.FullName) as an artifacts"
                  New-OctopusArtifact -Path $artifactHashFile.FullName -Name "$OctopusEnvironmentName.packagedartifacts.JSON"
                
                  $convertedFile = Get-Content -path $($artifactHashFile.FullName) -raw | ConvertFrom-Json
                }  
                
                foreach($packageItem in $objectArray)
                {  
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $hashOfObject = $null
                  if ($artifactToCompare[0].Contains("/"))
                  {
                    Write-Host "$artifactToCompare is a docker container, pulling the manifest information from DockerHub."
                    Write-Host "Invoking https://registry.hub.docker.com/v2/repositories/$($artifactToCompare[0])/tags?name=$($artifactToCompare[1])"
                    $workerToolsTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/$($artifactToCompare[0])/tags?name=$($artifactToCompare[1])"
                  
                    $matchingTag = $workerToolsTags.results | Where-Object { $_.name -eq $artifactToCompare[1] }
                  
                    $hashOfObject = $matchingTag.digest    
                  }
                  else
                  {
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])*.zip" -Recurse
                    }
                    
                    # Iterate through each .json file
                    foreach ($file in $zipFiles) 
                    {
                      Write-Host "Processing file: $($file.FullName)"
                
                      $rawHash = Get-FileHash -Path "$($file.FullName)" -Algorithm SHA256
                      $hashOfObject = $rawHash.Hash
                
                      Write-Host "The hash of $($file.FullName) is $hashOfObject"
                    }
                  }
                
                  if ($null -eq $hashOfObject)
                  {
                    Write-Error "Unable to find the hash for $packageItem"
                  }
                  
                  Write-Host "The hash we want to find is $hashOfObject"
                
                  $foundSha = $false
                  # Loop through all the keys
                  foreach ($key in $convertedFile.PSObject.Properties.Name) 
                  {
                     $item = $convertedFile.$key    
                     Write-Host "The hash to compare is $item"
                
                     if ($item -eq $hashOfObject)
                     {
                       Write-Highlight "$artifactToCompare hash $hashOfObject matches the original build hash."
                       $foundSha = $true
                     }
                     else 
                     {
                        Write-Host "The hash $item does not match the hash of the object $artifactToCompare"
                     }
                  }
                
                  if ($foundSha -eq $true)
                  {
                    Write-Host "The hash of $artifactToCompare was found in the file $fileContainingSha"
                  }
                  else 
                  {
                    Write-Error "The hash $hashOfObject for $artifactToCompare was not found, stopping the deployment."
                  }
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}